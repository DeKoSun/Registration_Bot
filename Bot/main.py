import asyncio
import logging
import os
import signal
from contextlib import suppress
from urllib.parse import urlparse
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand

from supabase import create_client, Client

# =============================
# –ö–æ–Ω—Ñ–∏–≥
# =============================
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
REG_URL = os.getenv("REG_URL")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
if not REG_URL:
    raise RuntimeError("REG_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).")

def _is_valid_url(u: str) -> bool:
    try:
        p = urlparse(u)
        return p.scheme in ("http", "https") and bool(p.netloc)
    except Exception:
        return False

if not _is_valid_url(REG_URL):
    raise RuntimeError(f"REG_URL –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {REG_URL!r}")

# =============================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("fenix-bot")

# =============================
# Supabase
# =============================
supabase: Optional[Client] = None
if SUPABASE_URL and SUPABASE_KEY:
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    log.info("Supabase client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    log.warning("SUPABASE_URL/SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∑–∞–ø–∏—Å—å –≤ –ë–î –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# =============================
# Aiogram
# =============================
dp = Dispatcher()

def registration_keyboard(tg_id: int) -> InlineKeyboardMarkup:
    # –ø–µ—Ä–µ–¥–∞—ë–º tg_id –≤ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏ –∞–Ω–∫–µ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    url = f"{REG_URL}?tg_id={tg_id}"
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üî• –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", url=url)]]
    )

@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª–∞–Ω–∞ –§–ï–ù–ò–ö–°.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=registration_keyboard(m.from_user.id)
    )

@dp.message(Command("registration"))
async def cmd_registration(m: Message):
    await m.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=registration_keyboard(m.from_user.id))

@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/registration ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n"
        "/test_upsert ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ rg_players"
    )

@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üß°")

@dp.message(F.text.lower().in_({"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "registration"}))
async def msg_registration_word(m: Message):
    await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å:", reply_markup=registration_keyboard(m.from_user.id))

# =============================
# Upsert –≤ rg_players
# =============================
TABLE = "rg_players"

async def upsert_player(record: Dict[str, Any]) -> Dict[str, Any]:
    """Upsert –∏–≥—Ä–æ–∫–∞ –ø–æ telegram_id –∏–ª–∏ telegram_norm"""
    if supabase is None:
        raise RuntimeError("Supabase client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    rec = dict(record)

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    if rec.get("telegram"):
        rec["telegram"] = str(rec["telegram"]).strip()
        rec["telegram_norm"] = rec["telegram"].lstrip("@").lower()

    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî telegram_id
    try:
        if rec.get("telegram_id"):
            resp = supabase.table(TABLE).upsert(rec, on_conflict="telegram_id").execute()
            return {"ok": True, "via": "on_conflict:telegram_id", "data": resp.data}
    except Exception as e:
        log.warning("Upsert –ø–æ telegram_id –Ω–µ —É–¥–∞–ª—Å—è: %s", e)

    # fallback ‚Äî telegram_norm
    try:
        if rec.get("telegram_norm"):
            resp = supabase.table(TABLE).upsert(rec, on_conflict="telegram_norm").execute()
            return {"ok": True, "via": "on_conflict:telegram_norm", "data": resp.data}
    except Exception as e:
        log.warning("Upsert –ø–æ telegram_norm –Ω–µ —É–¥–∞–ª—Å—è: %s", e)

    # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å ‚Äî select/update
    try:
        tgn = rec.get("telegram_norm")
        if tgn:
            found = supabase.table(TABLE).select("id").eq("telegram_norm", tgn).limit(1).execute()
            if found.data:
                pid = found.data[0]["id"]
                upd = supabase.table(TABLE).update(rec).eq("id", pid).execute()
                return {"ok": True, "via": "fallback:update", "data": upd.data}
        ins = supabase.table(TABLE).insert(rec).execute()
        return {"ok": True, "via": "fallback:insert", "data": ins.data}
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ upsert: %s", e)
        return {"ok": False, "error": str(e)}

# —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("test_upsert"))
async def cmd_test_upsert(m: Message):
    if supabase is None:
        await m.answer("Supabase –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    args = m.text.split(maxsplit=1)
    tg_user = args[1].strip() if len(args) > 1 else m.from_user.username or f"user_{m.from_user.id}"

    sample = {
        "telegram_id": m.from_user.id,
        "telegram": tg_user,
        "nickname": "DeKo_Sun",
        "clan": "–§–µ–Ω–∏–∫—Å",
    }

    res = await upsert_player(sample)
    if res.get("ok"):
        await m.answer(f"‚úÖ Upsert OK ({res.get('via')}), –∑–∞–ø–∏—Å–µ–π: {len(res.get('data') or [])}")
    else:
        await m.answer(f"‚ùå Upsert error: {res.get('error')}")

# =============================
# –°–ª—É–∂–µ–±–Ω–æ–µ
# =============================
async def set_commands(bot: Bot):
    cmds = [
        BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand(command="registration", description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
        BotCommand(command="test_upsert", description="–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î"),
    ]
    await bot.set_my_commands(cmds)

async def _shutdown(bot: Bot):
    await bot.session.close()
    log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

async def main():
    bot = Bot(BOT_TOKEN)
    await set_commands(bot)
    stop_event = asyncio.Event()

    def _handler(*_): stop_event.set()
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        with suppress(NotImplementedError):
            loop.add_signal_handler(sig, _handler)

    log.info("–ó–∞–ø—É—Å–∫–∞—é long polling‚Ä¶")
    polling = asyncio.create_task(dp.start_polling(bot))
    await stop_event.wait()
    polling.cancel()
    with suppress(asyncio.CancelledError):
        await polling
    await _shutdown(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
