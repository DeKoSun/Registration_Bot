# main.py
import asyncio
import logging
import os
import signal
from contextlib import suppress
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
REG_URL = os.getenv("REG_URL")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (GitHub Pages)

if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not REG_URL:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REG_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).")

# –ù–µ–±–æ–ª—å—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ —É–¥–∏–≤–ª—è—Ç—å—Å—è –ø—É—Å—Ç–æ–π –∫–Ω–æ–ø–∫–µ)
def _is_valid_url(u: str) -> bool:
    try:
        p = urlparse(u)
        return p.scheme in ("http", "https") and bool(p.netloc)
    except Exception:
        return False

if not _is_valid_url(REG_URL):
    raise RuntimeError(f"REG_URL –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {REG_URL!r}")

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
log = logging.getLogger("fenix-bot")

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram v3
# -----------------------------
dp = Dispatcher()


def registration_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", url=REG_URL)]
        ]
    )


@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª–∞–Ω–∞ –§–ï–ù–ò–ö–°.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=registration_keyboard(),
    )


@dp.message(Command("registration"))
async def cmd_registration(m: Message):
    await m.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=registration_keyboard())


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/registration ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"
    )


@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üß°")


# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message(F.text.lower().in_({"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "registration"}))
async def msg_registration_word(m: Message):
    await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å:", reply_markup=registration_keyboard())


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ –∏ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
        BotCommand(command="registration", description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
    ]
    await bot.set_my_commands(commands)
    log.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def _shutdown(bot: Bot):
    # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î/–∫–µ—à–∞–º –∏ —Ç.–ø.
    await bot.session.close()
    log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")


async def main():
    bot = Bot(BOT_TOKEN)
    await set_commands(bot)

    # –ì—Ä–µ–π—Å—Ñ—É–ª-—à–∞—Ç–¥–∞—É–Ω –ø–æ–¥ Railway/Heroku
    stop_event = asyncio.Event()

    def _handler(*_):
        stop_event.set()

    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        with suppress(NotImplementedError):
            loop.add_signal_handler(sig, _handler)

    # –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
    log.info("–ó–∞–ø—É—Å–∫–∞—é long polling‚Ä¶")
    polling = asyncio.create_task(dp.start_polling(bot))
    await stop_event.wait()
    polling.cancel()
    with suppress(asyncio.CancelledError):
        await polling
    await _shutdown(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
