# main.py
import asyncio
import logging
import os
import signal
from contextlib import suppress
from urllib.parse import urlparse
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand

# ---------- Supabase ----------
# pip install supabase
# (–¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ supabase-py v2)
from supabase import create_client, Client


# =============================
# –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
REG_URL = os.getenv("REG_URL")

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not REG_URL:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REG_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).")

def _is_valid_url(u: str) -> bool:
    try:
        p = urlparse(u)
        return p.scheme in ("http", "https") and bool(p.netloc)
    except Exception:
        return False

if not _is_valid_url(REG_URL):
    raise RuntimeError(f"REG_URL –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {REG_URL!r}")

# =============================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("fenix-bot")

# =============================
# Supabase client
# =============================
supabase: Optional[Client] = None
if SUPABASE_URL and SUPABASE_KEY:
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    log.info("Supabase client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    log.warning("SUPABASE_URL/SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî upsert –≤ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


# =============================
# Aiogram v3
# =============================
dp = Dispatcher()

def registration_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üî• –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", url=REG_URL)]])


@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª–∞–Ω–∞ –§–ï–ù–ò–ö–°.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", reply_markup=registration_keyboard())


@dp.message(Command("registration"))
async def cmd_registration(m: Message):
    await m.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=registration_keyboard())


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/registration ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n"
        "/test_upsert ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è upsert –≤ —Ç–∞–±–ª–∏—Ü—É rg_players"
    )


@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üß°")


@dp.message(F.text.lower().in_({"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "registration"}))
async def msg_registration_word(m: Message):
    await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å:", reply_markup=registration_keyboard())


# =============================
# Upsert –≤ Supabase
# =============================

TABLE = "rg_players"

async def upsert_player(record: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π upsert –≤ rg_players.
    –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ telegram_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–æ–ª–æ–Ω–∫–µ telegram_norm),
    –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å on_conflict='telegram_norm'.

    –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç ‚Äî –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback (SELECT + UPDATE/INSERT).
    """
    if supabase is None:
        raise RuntimeError("Supabase client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç SUPABASE_URL/SUPABASE_KEY).")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
    rec = dict(record)
    if "telegram" in rec and rec["telegram"] is not None:
        rec["telegram"] = str(rec["telegram"]).strip()
        # –ú–æ–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ (–µ—Å–ª–∏ —Ç–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î):
        # rec["telegram_norm"] = rec["telegram"].lower()

    # 1) –ï—Å–ª–∏ –µ—Å—Ç—å telegram_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    if rec.get("telegram_id") is not None:
        try:
            resp = supabase.table(TABLE).upsert(rec, on_conflict="telegram_id").execute()
            return {"ok": True, "via": "on_conflict: telegram_id", "data": resp.data}
        except Exception as e:
            log.warning("Upsert –ø–æ telegram_id –Ω–µ —É–¥–∞–ª—Å—è: %s", e)

    # 2) –ï—Å–ª–∏ –≤ –ë–î –ï–°–¢–¨ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –ù–ò–ñ–ù–ï–ú–£ —Ä–µ–≥–∏—Å—Ç—Ä—É –ª–æ–≥–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–ª–±–µ—Ü telegram_norm UNIQUE):
    #    –¢–æ–≥–¥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ë–õ–û–ö –Ω–∏–∂–µ –∏ –£–ë–ï–†–ò fallback.
    #
    # try:
    #     if "telegram_norm" in rec:
    #         resp = supabase.table(TABLE).upsert(rec, on_conflict="telegram_norm").execute()
    #         return {"ok": True, "via": "on_conflict: telegram_norm", "data": resp.data}
    # except Exception as e:
    #     log.warning("Upsert –ø–æ telegram_norm –Ω–µ —É–¥–∞–ª—Å—è: %s", e)

    # 3) Fallback –±–µ–∑ on_conflict: –∏—â–µ–º –ø–æ telegram (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞) –∏ –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ–º, –ª–∏–±–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
    try:
        data = rec.get("telegram")
        if data:
            found = supabase.table(TABLE).select("id").ilike("telegram", data).limit(1).execute()
            if found.data:
                player_id = found.data[0]["id"]
                upd = supabase.table(TABLE).update(rec).eq("id", player_id).execute()
                return {"ok": True, "via": "fallback:update", "data": upd.data}
        # –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤—Å—Ç–∞–≤–∫–∞
        ins = supabase.table(TABLE).insert(rec).execute()
        return {"ok": True, "via": "fallback:insert", "data": ins.data}
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ fallback upsert: %s", e)
        return {"ok": False, "error": str(e)}


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /test_upsert DeKo_Soon
@dp.message(Command("test_upsert"))
async def cmd_test_upsert(m: Message):
    if supabase is None:
        await m.answer("Supabase –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–π SUPABASE_URL –∏ SUPABASE_KEY.")
        return

    # –ë–µ—Ä–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ª–æ–≥–∏–Ω Telegram (–±–µ–∑ @)
    args = m.text.split(maxsplit=1)
    tg_user = args[1].strip() if len(args) > 1 else "demo_user"

    sample = {
        # –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ª—É—á—à–µ —É–∫–∞–∑—ã–≤–∞—Ç—å telegram_id, —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç upsert ¬´–∞—Ç–æ–º–∞—Ä–Ω—ã–º¬ª
        "telegram_id": m.from_user.id,
        "telegram": tg_user,
        "nickname": "DeKo_Sun",
        "clan": "–§–µ–Ω–∏–∫—Å",
        # –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ rg_players:
        # "country": "USA",
        # "city": "New York",
        # "days": ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–°—Ä–µ–¥–∞"],
        # "times": ["16:00 ‚Äì 19:00"],
    }

    res = await upsert_player(sample)
    if res.get("ok"):
        await m.answer(f"Upsert OK ({res.get('via')}), –∑–∞–ø–∏—Å–µ–π: {len(res.get('data') or [])}")
    else:
        await m.answer(f"Upsert error: {res.get('error')}")


# =============================
# –°–ª—É–∂–µ–±–Ω–æ–µ
# =============================
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ –∏ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
        BotCommand(command="registration", description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
        BotCommand(command="test_upsert", description="–î–µ–º–æ upsert –≤ rg_players"),
    ]
    await bot.set_my_commands(commands)
    log.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def _shutdown(bot: Bot):
    await bot.session.close()
    log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")


async def main():
    bot = Bot(BOT_TOKEN)
    await set_commands(bot)

    stop_event = asyncio.Event()

    def _handler(*_):
        stop_event.set()

    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        with suppress(NotImplementedError):
            loop.add_signal_handler(sig, _handler)

    log.info("–ó–∞–ø—É—Å–∫–∞—é long polling‚Ä¶")
    polling = asyncio.create_task(dp.start_polling(bot))
    await stop_event.wait()
    polling.cancel()
    with suppress(asyncio.CancelledError):
        await polling
    await _shutdown(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
